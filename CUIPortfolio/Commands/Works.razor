@inject HttpClient Http
@if (works == null)
{
    <p class="console">Loading...</p>
}
else
{
    @*オプションあり*@
    @if (rawInput.Split(' ').Length > 1)
    {
        <p class="console" style="color:limegreen">| Works (Language -> "@rawInput.Split(' ')[1]")</p>
        @if (works.Any(x => x.Language.Contains(rawInput.Split(' ')[1])))
        {
            @foreach (var item in works.Where(x => x.Language.Contains(rawInput.Split(' ')[1])))
            {
                <p class="console" style="color:navajowhite">
                    |- @item.Name [ @String.Join(", ", item.Language.Select(x => LangageNameConvartUserLike(x))) ] :
                    <span class="console">@item.Description</span>
                    @if (!(item.Command == ""))//詳細コマンドが存在する場合のみ表示
                    {
                        <span class="console" style="color:@Setting.CommandColor;">[ 詳細コマンド : @item.Command </span>
                    }
                </p>
            }
        }
        else
        {
            <p class="console">@rawInput.Split(' ')[1] によって開発されたプロダクトは見つかりませんでした。</p>
            <p class="console">受け入れている言語オプション -> <span class="console" style="color:@Setting.CommandColor;">{ cs, js, html+razor, css, processing }</span></p>
        }
    }
    else @*オプションなし*@
    {
        <p class="console" style="color:limegreen">| Works</p>
        @foreach (var item in works)
        {
            <p class="console" style="color:navajowhite">
                |- @item.Name [ @String.Join(", ", item.Language.Select(x => LangageNameConvartUserLike(x))) ] :
                <span class="console">@item.Description</span>
                @if (!(item.Command == ""))//詳細コマンドが存在する場合のみ表示
                {
                    <span class="console" style="color:@Setting.CommandColor;">[ 詳細コマンド : @item.Command ]</span>
                }
            </p>
        }
        <p class="console"><span style="font-weight:bold;color:gold;">Tips</span> : works {language} で言語による絞り込みが可能です</p>
    }
}

@code {

    [Parameter]
    public string rawInput { get; set; }

    private Work[] works;

    protected override async Task OnInitializedAsync()
    {
        works = await Http.GetFromJsonAsync<Work[]>("works.json");
    }

    private string LangageNameConvartUserLike(string str)
    {
        switch (str)
        {
            case "cs":
                return "C#";
            case "js":
                return "JavaScript";
            case "html+razor":
                return "HTML+Razor";
            case "css":
                return "CSS";
            case "processing":
                return "Processing";
        }
        return "?unknown?";
    }
}
